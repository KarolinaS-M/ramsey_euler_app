{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"},"kaggle":{"accelerator":"none","dataSources":[],"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# app.py — Ramsey model (Euler) with Streamlit sliders\nimport numpy as np\nimport streamlit as st\nimport matplotlib.pyplot as plt\n\nst.set_page_config(page_title=\"Ramsey (Euler) Simulator\", layout=\"wide\")\n\n# ---------- Model building blocks ----------\ndef f(k, alpha):\n    return k**alpha\n\ndef fprime(k, alpha):\n    return alpha * (k**(alpha - 1.0)) if k > 0 else 0.0\n\ndef rhs(k, c, alpha, delta, n, rho, theta):\n    dk = f(k, alpha) - c - (n + delta) * k\n    dc = (c / theta) * (fprime(k, alpha) - delta - rho)\n    return dk, dc\n\ndef euler_path(k0, c0, h, T, alpha, delta, n, rho, theta):\n    tgrid = np.arange(0.0, T + 1e-12, h)\n    N = len(tgrid)\n    k = np.empty(N); c = np.empty(N)\n    k[0], c[0] = k0, c0\n    for i in range(N - 1):\n        dk, dc = rhs(k[i], c[i], alpha, delta, n, rho, theta)\n        k_next = k[i] + h * dk\n        c_next = c[i] + h * dc\n        # numerical guards\n        k[i+1] = max(k_next, 0.0)\n        c[i+1] = max(c_next, 1e-300)  # tiny floor to avoid division-by-zero in TVC\n    return tgrid, k, c\n\ndef steady_state(alpha, rho, delta, n):\n    k_star = (alpha / (rho + delta)) ** (1.0 / (1.0 - alpha))\n    c_star = f(k_star, alpha) - (n + delta) * k_star\n    return k_star, c_star\n\ndef tvc_series(k, c, tgrid, n, rho, theta):\n    return (c**(-theta)) * k * np.exp((n - rho) * tgrid)\n\n# ---------- Sidebar controls ----------\nst.sidebar.header(\"Parameters\")\nalpha = st.sidebar.slider(\"α (Cobb–Douglas exponent)\", 0.05, 0.95, 0.33, 0.01)\ndelta = st.sidebar.slider(\"δ (depreciation)\", 0.0, 0.20, 0.05, 0.005)\nn     = st.sidebar.slider(\"n (population growth)\", -0.05, 0.10, 0.01, 0.001)\nrho   = st.sidebar.slider(\"ρ (discount rate)\", 0.0, 0.20, 0.02, 0.005)\ntheta = st.sidebar.slider(\"θ (inverse IES)\", 0.10, 5.00, 2.0, 0.10)\n\nst.sidebar.header(\"Numerics\")\nh   = st.sidebar.slider(\"Euler step h\", 0.001, 1.0, 0.1, 0.001)\nT   = st.sidebar.slider(\"Horizon T\", 10.0, 5000.0, 2200.0, 10.0)\n\nst.sidebar.header(\"Initial conditions\")\nk0  = st.sidebar.number_input(\"k(0)\", value=10.0, step=0.5)\nc0  = st.sidebar.number_input(\"c(0)\", value=1.0, step=0.1)\n\nst.sidebar.header(\"Plot options\")\ntvc_scale_log = st.sidebar.checkbox(\"Log scale for TVC\", value=False)\nshow_csv      = st.sidebar.checkbox(\"Show data table preview\", value=False)\n\n# ---------- Compute ----------\nk_star, c_star = steady_state(alpha, rho, delta, n)\nt, k, c = euler_path(k0, c0, h, T, alpha, delta, n, rho, theta)\ntvc = tvc_series(k, c, t, n, rho, theta)\n\n# ---------- Header ----------\nst.title(\"Ramsey Model (Euler) — Interactive Simulator\")\nst.markdown(\n    f\"\"\"\n**Steady state**: \\n\n- \\(k^* = {k_star:.5f}\\)  \n- \\(c^* = {c_star:.5f}\\)  \n**TVC at T**: \\( {tvc[-1]:.3e} \\)\n\"\"\"\n)\n\n# ---------- Plots: k(t) and c(t) side-by-side ----------\ncol1, col2 = st.columns(2)\n\nwith col1:\n    fig, ax = plt.subplots(figsize=(6, 4))\n    ax.plot(t, k, label=\"k(t)\")\n    ax.axhline(k_star, ls=\"--\", alpha=0.6, label=\"k*\")\n    ax.set_title(\"Capital per capita k(t)\")\n    ax.set_xlabel(\"t\"); ax.legend()\n    st.pyplot(fig)\n\nwith col2:\n    fig, ax = plt.subplots(figsize=(6, 4))\n    ax.plot(t, c, label=\"c(t)\")\n    ax.axhline(c_star, ls=\"--\", alpha=0.6, label=\"c*\")\n    ax.set_title(\"Consumption per capita c(t)\")\n    ax.set_xlabel(\"t\"); ax.legend()\n    st.pyplot(fig)\n\n# ---------- Separate TVC figure ----------\nfig, ax = plt.subplots(figsize=(12, 4))\nax.plot(t, tvc, color=\"orange\", label=\"TVC(t)\")\nax.set_title(\"Transversality condition\")\nax.set_xlabel(\"t\")\nif tvc_scale_log:\n    ax.set_yscale(\"log\")\nax.legend()\nst.pyplot(fig)\n\n# ---------- Optional table preview ----------\nif show_csv:\n    import pandas as pd\n    df = pd.DataFrame({\"t\": t, \"k(t)\": k, \"c(t)\": c, \"TVC\": tvc})\n    st.dataframe(df.head(200))\n    st.download_button(\"Download CSV\", data=df.to_csv(index=False), file_name=\"ramsey_euler.csv\", mime=\"text/csv\")\n\n# ---------- Footnote ----------\nst.caption(\n    \"Euler discretization: \"\n    r\"$k_{t+h}=k_t+h\\,[k_t^{\\alpha}-c_t-(n+\\delta)k_t]$, \"\n    r\"$c_{t+h}=c_t+h\\,\\big[\\frac{c_t}{\\theta}(\\alpha k_t^{\\alpha-1}-\\delta-\\rho)\\big]$. \"\n    \"Note: For a saddle-path system, explicit Euler can diverge unless the initial point lies on the stable manifold.\"\n)","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}